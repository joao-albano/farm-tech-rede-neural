#!/usr/bin/env python3
"""
Gerador de PDF para entrega do projeto FarmTech YOLO
FIAP - Faculdade de Inform√°tica e Administra√ß√£o Paulista
"""

from reportlab.lib.pagesizes import A4
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.units import inch, cm
from reportlab.lib.colors import HexColor, black, blue
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Image, Table, TableStyle
from reportlab.lib.enums import TA_CENTER, TA_LEFT, TA_JUSTIFY
from datetime import datetime
import os

def create_delivery_pdf():
    """Cria o PDF de entrega do projeto FarmTech YOLO"""
    
    # Configura√ß√£o do documento
    filename = "Entrega_FarmTech_YOLO.pdf"
    doc = SimpleDocTemplate(filename, pagesize=A4, 
                          rightMargin=2*cm, leftMargin=2*cm,
                          topMargin=2*cm, bottomMargin=2*cm)
    
    # Estilos
    styles = getSampleStyleSheet()
    
    # Estilo personalizado para t√≠tulo
    title_style = ParagraphStyle(
        'CustomTitle',
        parent=styles['Heading1'],
        fontSize=18,
        spaceAfter=30,
        alignment=TA_CENTER,
        textColor=HexColor('#1f4e79')
    )
    
    # Estilo para subt√≠tulos
    subtitle_style = ParagraphStyle(
        'CustomSubtitle',
        parent=styles['Heading2'],
        fontSize=14,
        spaceAfter=12,
        spaceBefore=20,
        textColor=HexColor('#2f5f8f')
    )
    
    # Estilo para texto normal
    normal_style = ParagraphStyle(
        'CustomNormal',
        parent=styles['Normal'],
        fontSize=11,
        spaceAfter=6,
        alignment=TA_JUSTIFY
    )
    
    # Estilo para informa√ß√µes da equipe
    team_style = ParagraphStyle(
        'TeamStyle',
        parent=styles['Normal'],
        fontSize=11,
        spaceAfter=4,
        leftIndent=20
    )
    
    # Lista de elementos do PDF
    story = []
    
    # Logo da FIAP (se existir)
    logo_path = "assets/logo-fiap.png"
    if os.path.exists(logo_path):
        try:
            logo = Image(logo_path, width=3*inch, height=1.5*inch)
            logo.hAlign = 'CENTER'
            story.append(logo)
            story.append(Spacer(1, 20))
        except:
            pass
    
    # T√≠tulo principal
    story.append(Paragraph("FIAP - Faculdade de Inform√°tica e Administra√ß√£o Paulista", 
                          ParagraphStyle('Center', alignment=TA_CENTER, fontSize=12, spaceAfter=10)))
    
    story.append(Paragraph("FarmTech YOLO: Sistema Inteligente de Detec√ß√£o de Celulares com Computer Vision", 
                          title_style))
    
    # Informa√ß√µes da equipe
    story.append(Paragraph("üë®‚Äçüéì Integrantes da Equipe", subtitle_style))
    
    team_members = [
        "Gabriella Serni Ponzetta ‚Äì RM 566296",
        "Jo√£o Francisco Maciel Albano ‚Äì RM 565985", 
        "Fernando Ricardo ‚Äì RM 566501",
        "Gabriel Schuler Barros ‚Äì RM 564934"
    ]
    
    for member in team_members:
        story.append(Paragraph(f"‚Ä¢ {member}", team_style))
    
    story.append(Spacer(1, 15))
    
    # Professores
    story.append(Paragraph("üë©‚Äçüè´ Professores", subtitle_style))
    story.append(Paragraph("<b>Tutores:</b>", team_style))
    story.append(Paragraph("‚Ä¢ Lucas Gomes Moreira", team_style))
    story.append(Paragraph("‚Ä¢ Leonardo Ruiz Orabona", team_style))
    story.append(Paragraph("<b>Coordenador:</b>", team_style))
    story.append(Paragraph("‚Ä¢ Andr√© Godoi Chiovato", team_style))
    
    story.append(Spacer(1, 20))
    
    # Link do reposit√≥rio
    story.append(Paragraph("üîó Reposit√≥rio do Projeto", subtitle_style))
    github_link = "https://github.com/joao-albano/farm-tech-rede-neural.git"
    story.append(Paragraph(f'<link href="{github_link}" color="blue">{github_link}</link>', normal_style))
    
    story.append(Spacer(1, 20))
    
    # Descri√ß√£o do projeto
    story.append(Paragraph("üìú Descri√ß√£o do Projeto", subtitle_style))
    
    description_text = """
    Este projeto implementa um sistema avan√ßado de detec√ß√£o de celulares utilizando t√©cnicas de Computer Vision 
    e Deep Learning com YOLO (You Only Look Once). O sistema combina modelos pr√©-treinados YOLOv8 com redes 
    neurais convolucionais customizadas, proporcionando detec√ß√£o em tempo real com alta precis√£o para aplica√ß√µes 
    em seguran√ßa, monitoramento e controle de acesso.
    """
    
    story.append(Paragraph(description_text, normal_style))
    
    description_text2 = """
    O projeto utiliza um dataset especializado de imagens de celulares, aplicando t√©cnicas modernas de 
    processamento de imagens e aprendizado profundo. A solu√ß√£o desenvolvida oferece uma alternativa 
    automatizada e eficiente para sistemas de detec√ß√£o manual, com aplica√ß√µes pr√°ticas em ambientes 
    corporativos, educacionais e de seguran√ßa.
    """
    
    story.append(Paragraph(description_text2, normal_style))
    
    story.append(Spacer(1, 20))
    
    # Principais resultados
    story.append(Paragraph("üìä Principais Resultados", subtitle_style))
    
    results_data = [
        ['M√©trica', 'Valor'],
        ['Modelo Utilizado', 'YOLOv8n'],
        ['Precis√£o de Detec√ß√£o', '> 85%'],
        ['Velocidade de Processamento', 'Tempo Real'],
        ['Dataset', 'Cellphone Detection Dataset'],
        ['Tecnologias', 'Python, PyTorch, OpenCV, YOLO']
    ]
    
    results_table = Table(results_data, colWidths=[3*inch, 2.5*inch])
    results_table.setStyle(TableStyle([
        ('BACKGROUND', (0, 0), (-1, 0), HexColor('#1f4e79')),
        ('TEXTCOLOR', (0, 0), (-1, 0), HexColor('#ffffff')),
        ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
        ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
        ('FONTSIZE', (0, 0), (-1, 0), 11),
        ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
        ('BACKGROUND', (0, 1), (-1, -1), HexColor('#f8f9fa')),
        ('GRID', (0, 0), (-1, -1), 1, black),
        ('FONTSIZE', (0, 1), (-1, -1), 10),
        ('ROWBACKGROUNDS', (0, 1), (-1, -1), [HexColor('#ffffff'), HexColor('#f8f9fa')])
    ]))
    
    story.append(results_table)
    story.append(Spacer(1, 30))
    
    # Estrutura do projeto
    story.append(Paragraph("üìÅ Estrutura do Projeto", subtitle_style))
    
    structure_text = """
    O projeto est√° organizado seguindo as melhores pr√°ticas de desenvolvimento, com separa√ß√£o clara entre 
    c√≥digo-fonte, documenta√ß√£o, assets e configura√ß√µes. A estrutura inclui notebooks Jupyter para an√°lise 
    interativa, scripts Python para automa√ß√£o, documenta√ß√£o t√©cnica completa e datasets organizados.
    """
    
    story.append(Paragraph(structure_text, normal_style))
    
    story.append(Spacer(1, 30))
    
    # Data de entrega
    current_date = datetime.now().strftime("%d de %B de %Y")
    story.append(Paragraph(f"üìÖ Data de Entrega: {current_date}", 
                          ParagraphStyle('DateStyle', fontSize=12, alignment=TA_CENTER, 
                                       textColor=HexColor('#666666'))))
    
    # Gerar o PDF
    doc.build(story)
    print(f"‚úÖ PDF gerado com sucesso: {filename}")
    return filename

if __name__ == "__main__":
    try:
        pdf_file = create_delivery_pdf()
        print(f"üìÑ Arquivo PDF criado: {pdf_file}")
        print("üéØ O PDF est√° pronto para entrega!")
    except Exception as e:
        print(f"‚ùå Erro ao gerar PDF: {e}")
        print("üí° Certifique-se de que a biblioteca reportlab est√° instalada: pip install reportlab")